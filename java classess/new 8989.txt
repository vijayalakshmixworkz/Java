Package
folders
project: standard package
reverse domain
IDE: compiler,editor,console
package com.xworkz.monday;
public class runner{
}
sysout: system.out.println

layoffs.fyi tracker 

package:
it is a keyword represent a folder first statement java file path of the program.
standard package
domaintype.companyname.appname

ACCESS-SPECIFIER:
who can access the program.
it control what another class can do in this class
use it with class,variables,consrtuctor,methods.
1.public 
 - same package or  diff package
2. protected
- inheritance
3. package-default ( it is virtual,it dont have keyword)
-same package
4.private
-same class

import:
key word used to import the classes from different packages.

//protected
-protected is meant for inheritance from a different package.
-protected is in between and public
-it is an access-specifier
-[var,classes,methods,constructors]
-it is package default ,with same package we can access with inheritance



// over riding
- subclass over ride the method inherited
-override means chnage the logic


// over-loading
-methods with same names but different parameters
-change in the parameters
-there should be change in number of parameters or datatype of parameters.
-with in class
- constructor and method
-TWO Methods having same in but different parameters
1.method over-loading [with reference names]
2. consrtuctor over-loading [with new keyword]

- datatypes should be different
- reference names can be same or different



inheritance,chaining

inheritance:
one class inherita properties & methods of another class.


❤️❤️❤️❤️❤️❤️😍😍😍😍😍💖

//Object:
it is a real world intity.
super class present in package called as java.lang
it is a superclass

it is instance of class
11 methods are there.


// Casting:

// protected
it is an access-specifier
it allows subclass to acces by anyclass using override or invoke.
it can be used when you want only subclass from any package to access.
it is meant for inheritance.- child class can inherit from any package.


//  boolean equals method
ref.method()
this
sheep1.equals(sheep2);
sheep1-this // variables of sheep1 can be accesed by equals method
sheep2- obj // use casting to access variables and methods of subclass


========================sep11===========================
// toString
sop(ref); String representation// invoke toString opeation
defaultvalue: fullyQualifiedName+@+integer.hexadecimal number

// int hashCode()
hashing algorithm
to see unique id the of object is created
this unique id is used by jvm or another class
ex:
int sheep1code=sheep1.hashcode();
sop("id":+sheep1code);
or 
sop("code"+sheep1.hashCode());
subclass can override this method
if you invoke this method you will get hashcode of overridden method in subclass.

for original hashcode use super.hashcode();
system.identityHashCode(ref);// it gives original hashCode// it is available in system class

classes that related to hashCode
hashSet
linkedHashSet
treeSet
hashMap
linkedHashMap

// final
is a keyword
we can use this keyword with variables and methods
it is non-access specifier


// principles
principles are the characteristics of object inreal world
POLYMORPHISM:same name different forms
class is poly:
1. over-loading
--  in a class same method name. diff in parameters:no of parameter or datatype
--it is called as compile time polymorphism.
2. overr-riding
-- subclass over-ride(change logic)of the inherited method 
-runtime polymorphism( jvm will check the version of the method to use either parent or subclass method) acheived using over-riding


=======================sep 12==============================
blocks:
1.static block 
//static block runs only once

2. object block
// it can be execute multiple times


============================sep 13=========================================
constructor:
 use: init instance variables
 use this with new or chaining

 
Abstract:
is a keyword, which means incomplete
we can complete it using inheritance.
only subclass can complete it'abstract is used in class and methods.
in subclass complete the abstract method using over-ride.

incomplete - abstract
complete- concrete

abstract methods do not have body.
abstract class also have constructor.

in abstract class we can use constructor with new keyword, so use chaining.


class: custom data type
abstract: custom datatype

==========================sep 16===========================
interface: 
media between two classes.
is a data type
variables:static
methods:default and static
cannot create consrtuctor
interface is a media that connects two systems
in java it connects two classes.
--- interface can be called as rules (methods)
it contains abstract methods


=========================oct 7==================

Functional interfaces:
interface which have only one method abstract 
declaration:
public  interface Starter{
void on();
}
in runner class:
// lambda expression
// arrow functions
Starter starter=()->
{
System.out.println("running on in lambda expression);
};
// pass the interface
classname ref=new classname();
ref.function(interfaceref);

//interface with arguments:
classname ref =(String argument, int argument)->{
		System.out.println("");
}



FoodApp foodApp=(String item, int quantity)->{
		System.out.println("");
}
Ecom ecom=(String item,int quantity)->{
		system.out.println("");
}
		
OnlineShop onlineShop=(String item,int quantity,double discount)->{
		system.out.println("");
}

=======================oct 8================
API:-
Application Programming Interface
set of interfaces,classes,annotations&enum
to design the standards to connect to applications.
Standard:


Stream:-
it is an API
API(interfaces,class,annotations&enum)
	store ref of integer:
		Collection<Integer>collection=new ArrayList();
			collection.add(13);
			collection.add(16);
			collection.add(17);
			collection.add(18);
			collection.add(14);
			collection.add(19);
			
